ENV["RAILS_ENV"] ||= "test"
require_relative "../config/environment"
require "rails/test_help"

require "date"

# Note: some stuff such as person names are autogenerated, but left hardcoded for better debugging
# (should try to avoid use of `Faker` here)

class ActiveSupport::TestCase
  # Run tests in parallel with specified workers
  parallelize(workers: :number_of_processors)

  # Setup all fixtures in test/fixtures/*.yml for all tests in alphabetical order
  fixtures :all

  # Ensuring two errors are equal by type and message.
  # References (thanks): https://stackoverflow.com/a/3454953/12684271
  # @param expectedError [Exception]
  # @param gotError [Exception]
  def assertExceptionsEqual(expectedError:, gotError:)
    assert_equal(expectedError.class, gotError.class)
    assert_equal(expectedError.message, gotError.message)
  end

  # @return [AcademicPeriod]
  def getFooAcademicPeriod()
    return AcademicPeriod.new(name: "2040-10")
  end

  # @param title [String]
  # @return [CourseInstance]
  def getFooCourseInstance(title:)
    return CourseInstance.new(
      nrc: "1234",
      title: title,
      teacher: "Lerma/GonzÃ¡lez Ariadna",
      credits: 6,
      career: "ICC",
      course_number: 666,
      section: 1,
      curriculum: "PE2033",
      academic_period: self.getFooAcademicPeriod()
    )
  end

  # @return [User]
  def getFooUser()
    return User.new(
      email: "deshka@foo.com",
      username: "deshka347",
      password: "qwerty"
    )
  end

  # Compares two `CourseInstance`s without minding IDs nor db timestamps.
  # @param leftCourse [CourseInstance]
  # @param rightCourse [CourseInstance]
  def assertEqualCourseInstances(leftCourse, rightCourse)
    assert_equal(leftCourse.nrc, rightCourse.nrc)
    assert_equal(leftCourse.title, rightCourse.title)
    assert_equal(leftCourse.teacher, rightCourse.teacher)
    assert_equal(leftCourse.credits, rightCourse.credits)
    assert_equal(leftCourse.career, rightCourse.career)
    assert_equal(leftCourse.course_number, rightCourse.course_number)
    assert_equal(leftCourse.section, rightCourse.section)
    assert_equal(leftCourse.curriculum, rightCourse.curriculum)
    assert_equal(leftCourse.liga, rightCourse.liga)
    assert_equal(leftCourse.lcruz, rightCourse.lcruz)
  end

  # Compares two `CourseEvent`s without minding IDs nor db timestamps.
  # @param leftEvent [CourseEvent]
  # @param rightEvent [CourseEvent]
  # def assertEqualCourseEvents(leftEvent, rightEvent)
  #   puts(">>> Comparing events: \n    #{leftEvent.inspect()}\n    #{rightEvent.inspect()}") #! debug
  #   assert_equal(leftEvent.location, rightEvent.location)
  #   assert_equal(leftEvent.day_of_week, rightEvent.day_of_week)
  #   assert_equal(leftEvent.start_time, rightEvent.start_time)
  #   assert_equal(leftEvent.end_time, rightEvent.end_time)
  #   assert_equal(leftEvent.date, rightEvent.date)
  # end

  # @param array [Array]
  # @param event [CourseEvent]
  def isCourseEventInArray(array, event)
    array.each do |item|
      if (
        (item.location == event.location) &&
        (item.day_of_week == event.day_of_week) &&
        (item.start_time == event.start_time) &&
        (item.end_time == event.end_time) &&
        (item.date == event.date)
      )
        return true
      end
    end
    return false
  end
end
